Linked lists expose:

- no explicit index
- not contiguous in memory
Instead:
- head variable points to first node
- tail variable points to the last node
- each node points to the next, last one points to None (single linked list)
- back pointer from each node to its predecessor (double linked list)


Methods:
- append: O(1), point last node.next to new node, point tail to new node
- remove last node: O(n), point prelast node.next to None, point tail to prelast node, but you need to find prelast node!
- prepend: O(1), point new node.next to first node (=head), point head to new node
- remove first node: O(1), point head to 2nd node
- add item to middle: O(n), find predecessor, then just set pointers
- remove item from middle: O(n), find node, set pointers
- lookup (by index and value): O(n)

Nodes are objects in their own right, having at least a value and a next-pointer.
